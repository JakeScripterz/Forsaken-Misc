--// You Shouldn't Be Here

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Create main GUI elements
local ScreenGui = Instance.new("ScreenGui")
local LoadingFrame = Instance.new("Frame")
local MainFrame = Instance.new("Frame")

-- GUI Setup
ScreenGui.Name = "HackerInterface"
ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Loading Screen
LoadingFrame.Name = "LoadingFrame"
LoadingFrame.Parent = ScreenGui
LoadingFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
LoadingFrame.BorderColor3 = Color3.fromRGB(255, 0, 0)
LoadingFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
LoadingFrame.Size = UDim2.new(0, 400, 0, 300)
LoadingFrame.ZIndex = 1000

local LoadingTitle = Instance.new("TextLabel")
LoadingTitle.Name = "LoadingTitle"
LoadingTitle.Parent = LoadingFrame
LoadingTitle.BackgroundTransparency = 1
LoadingTitle.Position = UDim2.new(0, 0, 0, 20)
LoadingTitle.Size = UDim2.new(1, 0, 0, 30)
LoadingTitle.Font = Enum.Font.Code
LoadingTitle.Text = "C00lgui v8"
LoadingTitle.TextColor3 = Color3.fromRGB(255, 0, 0)
LoadingTitle.TextSize = 24
LoadingTitle.ZIndex = 1001

-- User Info Display
local UserInfo = Instance.new("TextLabel")
UserInfo.Name = "UserInfo"
UserInfo.Parent = LoadingFrame
UserInfo.BackgroundTransparency = 1
UserInfo.Position = UDim2.new(0, 10, 0, 60)
UserInfo.Size = UDim2.new(1, -20, 0, 20)
LoadingTitle.Font = Enum.Font.Code
UserInfo.Text = "User: " .. Players.LocalPlayer.Name
UserInfo.TextColor3 = Color3.fromRGB(255, 0, 0)
UserInfo.TextSize = 14
UserInfo.TextXAlignment = Enum.TextXAlignment.Left
UserInfo.ZIndex = 1001

local LoadingStatus = Instance.new("TextLabel")
LoadingStatus.Name = "LoadingStatus"
LoadingStatus.Parent = LoadingFrame
LoadingStatus.BackgroundTransparency = 1
LoadingStatus.Position = UDim2.new(0, 10, 0, 100)
LoadingStatus.Size = UDim2.new(1, -20, 0, 20)
LoadingStatus.Font = Enum.Font.Code
LoadingStatus.Text = "Initializing..."
LoadingStatus.TextColor3 = Color3.fromRGB(255, 0, 0)
LoadingStatus.TextSize = 16
LoadingStatus.TextXAlignment = Enum.TextXAlignment.Left
LoadingStatus.ZIndex = 1001

local LoadingBar = Instance.new("Frame")
LoadingBar.Name = "LoadingBar"
LoadingBar.Parent = LoadingFrame
LoadingBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
LoadingBar.BorderColor3 = Color3.fromRGB(255, 0, 0)
LoadingBar.Position = UDim2.new(0, 10, 0, 130)
LoadingBar.Size = UDim2.new(1, -20, 0, 20)
LoadingBar.ZIndex = 1001

local LoadingFill = Instance.new("Frame")
LoadingFill.Name = "LoadingFill"
LoadingFill.Parent = LoadingBar
LoadingFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
LoadingFill.BorderSizePixel = 0
LoadingFill.Size = UDim2.new(0, 0, 1, 0)
LoadingFill.ZIndex = 1002

-- Create glitch text effect
local function glitchText(text)
    local glitchChars = {"Δ", "Σ", "π", "Ω", "λ", "γ"}
    local result = ""
    for i = 1, #text do
        if math.random() < 0.1 then
            result = result .. glitchChars[math.random(1, #glitchChars)]
        else
            result = result .. text:sub(i,i)
        end
    end
    return result
end

-- Loading Sequence with Matrix effect
local function typeWrite(text, label)
    local displayText = ""
    for i = 1, #text do
        displayText = displayText .. text:sub(i,i)
        label.Text = displayText
        if math.random() < 0.1 then
            label.Text = glitchText(displayText)
            wait(0.02)
            label.Text = displayText
        end
        wait(0.02)
    end
end

-- Main Interface Setup
MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
MainFrame.BorderColor3 = Color3.fromRGB(255, 0, 0)
MainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
MainFrame.Size = UDim2.new(0, 400, 0, 300)
MainFrame.Visible = false
MainFrame.Active = true
MainFrame.Draggable = true

-- Create the scanner effect
local ScannerEffect = Instance.new("Frame")
ScannerEffect.Name = "ScannerEffect"
ScannerEffect.Parent = MainFrame
ScannerEffect.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
ScannerEffect.BackgroundTransparency = 0.9
ScannerEffect.BorderSizePixel = 0
ScannerEffect.Size = UDim2.new(1, 0, 0, 2)
ScannerEffect.ZIndex = 2

-- Title Bar
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Parent = MainFrame
Title.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Title.BorderColor3 = Color3.fromRGB(255, 0, 0)
Title.Size = UDim2.new(1, -25, 0, 30)
Title.Font = Enum.Font.Code
Title.Text = "C00lgui v8"
Title.TextColor3 = Color3.fromRGB(255, 0, 0)
Title.TextSize = 16

-- Minimize Button
local MinimizeBtn = Instance.new("TextButton")
MinimizeBtn.Name = "MinimizeBtn"
MinimizeBtn.Parent = MainFrame
MinimizeBtn.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MinimizeBtn.BorderColor3 = Color3.fromRGB(255, 0, 0)
MinimizeBtn.Position = UDim2.new(1, -25, 0, 0)
MinimizeBtn.Size = UDim2.new(0, 25, 0, 30)
MinimizeBtn.Font = Enum.Font.Code
MinimizeBtn.Text = "-"
MinimizeBtn.TextColor3 = Color3.fromRGB(255, 0, 0)
MinimizeBtn.TextSize = 20

-- Create Tab System
local TabContainer = Instance.new("Frame")
TabContainer.Name = "TabContainer"
TabContainer.Parent = MainFrame
TabContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
TabContainer.BorderColor3 = Color3.fromRGB(255, 0, 0)
TabContainer.Position = UDim2.new(0, 10, 0, 40)
TabContainer.Size = UDim2.new(1, -20, 0, 30)

local ContentContainer = Instance.new("Frame")
ContentContainer.Name = "ContentContainer"
ContentContainer.Parent = MainFrame
ContentContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ContentContainer.BorderColor3 = Color3.fromRGB(255, 0, 0)
ContentContainer.Position = UDim2.new(0, 10, 0, 80)
ContentContainer.Size = UDim2.new(1, -20, 1, -90)

-- Tab Button Creation Function
local function createTab(name, position)
    local tab = Instance.new("TextButton")
    tab.Name = name .. "Tab"
    tab.Parent = TabContainer
    tab.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    tab.BorderColor3 = Color3.fromRGB(255, 0, 0)
    tab.Position = UDim2.new(position * 0.2, 0, 0, 0)
    tab.Size = UDim2.new(0.2, -2, 1, 0)
    tab.Font = Enum.Font.Code
    tab.Text = name
    tab.TextColor3 = Color3.fromRGB(255, 0, 0)
    tab.TextSize = 14
    return tab
end

-- Create Tabs
local tabs = {
    createTab("Aimbot", 0),
    createTab("Orbit", 1),
    createTab("Trip", 2),
    createTab("ESP", 3),
    createTab("Misc", 4)
}

-- Create Content Pages
local pages = {}
for _, tab in ipairs(tabs) do
    local page = Instance.new("Frame")
    page.Name = tab.Text .. "Page"
    page.Parent = ContentContainer
    page.BackgroundTransparency = 1
    page.Size = UDim2.new(1, 0, 1, 0)
    page.Visible = false
    pages[tab.Text] = page
end

-- Show first page by default
pages["Aimbot"].Visible = true

-- Tab Switching Logic
for _, tab in ipairs(tabs) do
    tab.MouseButton1Click:Connect(function()
        for _, page in pairs(pages) do
            page.Visible = false
        end
        pages[tab.Text].Visible = true
    end)
end

-- Continue with implementation of individual features...
-- [I can provide the complete implementation of each feature (Aimbot, Orbit, etc.) if you want]

-- Start the interface
local function startSystem()
    local loadingSteps = {
        {text = "Initializing system modules...", time = 0.5},
        {text = "Bypassing security protocols...", time = 0.7},
        {text = "Accessing mainframe...", time = 0.6},
        {text = "Loading exploit framework...", time = 0.8},
        {text = "Establishing secure connection...", time = 0.5},
        {text = "System successfully compromised", time = 1.0}
    }
    
    for _, step in ipairs(loadingSteps) do
        typeWrite(step.text, LoadingStatus)
        wait(step.time)
    end
    
    -- Transition to main interface
    TweenService:Create(LoadingFrame, TweenInfo.new(1), {
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, -200, 0.6, -150)
    }):Play()
    
    MainFrame.Position = UDim2.new(0.5, -200, 0.4, -150)
    MainFrame.BackgroundTransparency = 1
    MainFrame.Visible = true
    
    TweenService:Create(MainFrame, TweenInfo.new(1), {
        BackgroundTransparency = 0,
        Position = UDim2.new(0.5, -200, 0.5, -150)
    }):Play()
    
    wait(1)
    LoadingFrame:Destroy()
end

-- Scanner Animation
local function animateScanner()
    while true do
        TweenService:Create(ScannerEffect, TweenInfo.new(2, Enum.EasingStyle.Linear), {
            Position = UDim2.new(0, 0, 1, 0)
        }):Play()
        wait(2)
        ScannerEffect.Position = UDim2.new(0, 0, 0, -2)
    end
end

-- Initialize the interface
startSystem()
coroutine.wrap(animateScanner)()

-- Add this after your existing pages setup in UI-Overhaul.txt

-- Aimbot Page Elements
local aimbotInput = Instance.new("TextBox")
aimbotInput.Name = "AimbotInput"
aimbotInput.Parent = pages["AimbotPage"]
aimbotInput.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
aimbotInput.BorderColor3 = Color3.new(1, 0, 0)
aimbotInput.Position = UDim2.new(0.05, 0, 0.05, 0)
aimbotInput.Size = UDim2.new(0.65, 0, 0.1, 0)
aimbotInput.PlaceholderText = "Enter Username (Optional)"
aimbotInput.TextColor3 = Color3.new(1, 1, 1)
aimbotInput.TextScaled = true

local aimbotToggle = Instance.new("TextButton")
aimbotToggle.Name = "AimbotToggle"
aimbotToggle.Parent = pages["AimbotPage"]
aimbotToggle.BackgroundColor3 = Color3.new(0, 0, 0)
aimbotToggle.BorderColor3 = Color3.new(1, 0, 0)
aimbotToggle.Position = UDim2.new(0.75, 0, 0.05, 0)
aimbotToggle.Size = UDim2.new(0.2, 0, 0.1, 0)
aimbotToggle.Font = Enum.Font.SourceSansBold
aimbotToggle.Text = "OFF"
aimbotToggle.TextColor3 = Color3.new(1, 0, 0)
aimbotToggle.TextScaled = true

local aimbotStatus = Instance.new("TextLabel")
aimbotStatus.Name = "AimbotStatus"
aimbotStatus.Parent = pages["AimbotPage"]
aimbotStatus.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
aimbotStatus.BorderColor3 = Color3.new(1, 0, 0)
aimbotStatus.Position = UDim2.new(0.05, 0, 0.2, 0)
aimbotStatus.Size = UDim2.new(0.9, 0, 0.1, 0)
aimbotStatus.Font = Enum.Font.SourceSans
aimbotStatus.Text = "Status: Ready"
aimbotStatus.TextColor3 = Color3.new(1, 1, 1)
aimbotStatus.TextScaled = true

-- Add all the functions exactly as they were in source.txt (the ones I provided in previous message)
-- Then add rest of the UI elements:

-- Orbit Page Elements
local orbitInput = Instance.new("TextBox")
orbitInput.Name = "OrbitInput"
orbitInput.Parent = pages["OrbitPage"]


-- Tripmine Page Elements
local tripmineInput = Instance.new("TextBox")
tripmineInput.Name = "TripmineInput"
tripmineInput.Parent = pages["TripminePage"]
-- (continue with tripmine page elements setup)

-- Spookz Page Elements
local spookzScrollingFrame = Instance.new("ScrollingFrame")
spookzScrollingFrame.Name = "SpookzScrollingFrame"
spookzScrollingFrame.Parent = pages["SpookzPage"]
-- (continue with spookz page elements setup)

-- Teleport Page Elements
local teleportInput = Instance.new("TextBox")
teleportInput.Name = "TeleportInput"
teleportInput.Parent = pages["TeleportPage"]
-- (continue with teleport page elements setup)

local aimbotEnabled = false
local aimbotConnection = nil
local currentTarget = nil

local function getClosestPlayer()
    local localPlayer = Players.LocalPlayer
    local localCharacter = localPlayer.Character
    if not localCharacter then return nil end
    
    local localHead = localCharacter:FindFirstChild("Head")
    if not localHead then return nil end
    
    local closestPlayer = nil
    local closestDistance = math.huge
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            local character = player.Character
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            local head = character:FindFirstChild("Head")
            
            if humanoid and humanoid.Health > 0 and head then
                local distance = (head.Position - localHead.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end
    
    return closestPlayer
end

local function updateAimbot()
    if not aimbotEnabled then return end
    
    local targetPlayer = currentTarget
    if not targetPlayer or not targetPlayer.Character then
        targetPlayer = getClosestPlayer()
        currentTarget = targetPlayer
    end
    
    if targetPlayer and targetPlayer.Character then
        local character = targetPlayer.Character
        local head = character:FindFirstChild("Head")
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        
        if head and humanoid and humanoid.Health > 0 then
            local localPlayer = Players.LocalPlayer
            local localCharacter = localPlayer.Character
            if localCharacter then
                local humanoidRootPart = localCharacter:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    local direction = (head.Position - humanoidRootPart.Position).Unit
                    humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position, humanoidRootPart.Position + direction)
                end
            end
        else
            currentTarget = nil
        end
    end
end

local function toggleAimbot()
    aimbotEnabled = not aimbotEnabled
    
    if aimbotEnabled then
        aimbotToggle.Text = "ON"
        aimbotToggle.TextColor3 = Color3.new(0, 1, 0)
        aimbotStatus.Text = "Status: Aimbot Enabled"
        
        local targetName = aimbotInput.Text
        if targetName and targetName ~= "" then
            currentTarget = Players:FindFirstChild(targetName)
            if currentTarget then
                aimbotStatus.Text = "Status: Targeting "..targetName
            else
                aimbotStatus.Text = "Status: Player not found, using closest"
                currentTarget = getClosestPlayer()
            end
        else
            currentTarget = getClosestPlayer()
        end
        
        aimbotConnection = RunService.Heartbeat:Connect(updateAimbot)
    else
        aimbotToggle.Text = "OFF"
        aimbotToggle.TextColor3 = Color3.new(1, 0, 0)
        aimbotStatus.Text = "Status: Aimbot Disabled"
        currentTarget = nil
        
        if aimbotConnection then
            aimbotConnection:Disconnect()
            aimbotConnection = nil
        end
    end
end

aimbotToggle.MouseButton1Click:Connect(toggleAimbot)

-- Orbit Function
local orbitEnabled = false
local orbitConnection = nil
local orbitTarget = nil
local orbitAngle = 0
local orbitDistance = 2
local orbitSpeed = 0.2

local function toggleOrbit()
    orbitEnabled = not orbitEnabled
    
    if orbitEnabled then
        local targetName = orbitInput.Text
        if targetName and targetName ~= "" then
            orbitTarget = Players:FindFirstChild(targetName)
            if not orbitTarget then
                orbitStatus.Text = "Status: Player not found!"
                orbitEnabled = false
                return
            end
        else
            orbitStatus.Text = "Status: Enter a username!"
            orbitEnabled = false
            return
        end
        
        orbitToggle.Text = "ON"
        orbitToggle.TextColor3 = Color3.new(0, 1, 0)
        orbitStatus.Text = "Status: Orbiting "..orbitTarget.Name
        
        orbitConnection = RunService.Heartbeat:Connect(function()
            if orbitTarget and orbitTarget.Character then
                local targetRoot = orbitTarget.Character:FindFirstChild("HumanoidRootPart")
                local localRoot = Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                
                if targetRoot and localRoot then
                    orbitAngle = orbitAngle + orbitSpeed
                    if orbitAngle > 2 * math.pi then
                        orbitAngle = 0
                    end
                    
                    local offset = Vector3.new(math.cos(orbitAngle) * orbitDistance, 0, math.sin(orbitAngle) * orbitDistance)
                    local orbitPosition = targetRoot.Position + offset
                    
                    localRoot.CFrame = CFrame.new(orbitPosition, targetRoot.Position)
                else
                    orbitStatus.Text = "Status: Missing root parts!"
                end
            else
                orbitStatus.Text = "Status: Target lost!"
                if orbitConnection then
                    orbitConnection:Disconnect()
                    orbitConnection = nil
                end
                orbitEnabled = false
                orbitToggle.Text = "OFF"
                orbitToggle.TextColor3 = Color3.new(1, 0, 0)
            end
        end)
    else
        orbitToggle.Text = "OFF"
        orbitToggle.TextColor3 = Color3.new(1, 0, 0)
        orbitStatus.Text = "Status: Orbit Disabled"
        
        if orbitConnection then
            orbitConnection:Disconnect()
            orbitConnection = nil
        end
    end
end

orbitToggle.MouseButton1Click:Connect(toggleOrbit)

-- Tripmine Functions
local tripmineBox = nil
local tripmineCenter = nil
local tripmineLoopEnabled = false
local tripmineLoopConnection = nil

local function findTripmineParts()
    local foundBox = workspace:FindFirstChild("SubspaceBox", true)
    local foundCenter = workspace:FindFirstChild("SubspaceCenter", true)
    
    if not foundBox or not foundCenter then
        for _, part in pairs(workspace:GetDescendants()) do
            if part:IsA("BasePart") and part.Name:lower():find("box") then
                foundBox = part
            elseif part:IsA("BasePart") and part.Name:lower():find("center") then
                foundCenter = part
            end
        end
    end
    
    if foundBox and foundCenter then
        tripmineBox = foundBox
        tripmineCenter = foundCenter
        return true
    end
    
    return false
end

local function throwTripmineAtPlayer(targetPlayer)
    if not targetPlayer then
        tripmineStatus.Text = "Status: No target selected"
        return
    end
    if not targetPlayer.Character then
        tripmineStatus.Text = "Status: Target has no character"
        return
    end
    
    local humanoidRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        tripmineStatus.Text = "Status: Target missing HumanoidRootPart!"
        return
    end
    
    if not findTripmineParts() then
        tripmineStatus.Text = "Status: Tripmine parts not found!"
        return
    end

    if tripmineLoopConnection then
        tripmineLoopConnection:Disconnect()
        tripmineLoopConnection = nil
    end

    tripmineStatus.Text = "Status: Locking tripmine to "..targetPlayer.Name.."..."
    
    local targetPosition = humanoidRootPart.Position + Vector3.new(0, 3, 0)
    tripmineBox.CFrame = CFrame.new(targetPosition)
    tripmineCenter.CFrame = CFrame.new(targetPosition)
    
    if tripmineLoopEnabled then
        tripmineLoopConnection = RunService.Heartbeat:Connect(function()
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 3, 0)
                
                if not tripmineBox or not tripmineBox.Parent or not tripmineCenter or not tripmineCenter.Parent then
                    if not findTripmineParts() then
                        tripmineLoopConnection:Disconnect()
                        tripmineLoopConnection = nil
                        tripmineStatus.Text = "Status: Tripmine disappeared!"
                        return
                    end
                end
                
                if not tripmineBox:FindFirstChild("BodyVelocity") then
                    local boxVelocity = Instance.new("BodyVelocity")
                    boxVelocity.Velocity = Vector3.new(0, 0, 0)
                    boxVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                    boxVelocity.P = 10000
                    boxVelocity.Parent = tripmineBox
                end
                
                if not tripmineCenter:FindFirstChild("BodyVelocity") then
                    local centerVelocity = Instance.new("BodyVelocity")
                    centerVelocity.Velocity = Vector3.new(0, 0, 0)
                    centerVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                    centerVelocity.P = 10000
                    centerVelocity.Parent = tripmineCenter
                end
                
                local direction = (targetPosition - tripmineBox.Position).Unit
                tripmineBox.Velocity = direction * 50
                tripmineCenter.Velocity = direction * 50
            else
                if tripmineLoopConnection then
                    tripmineLoopConnection:Disconnect()
                    tripmineLoopConnection = nil
                end
                tripmineStatus.Text = "Status: Target lost!"
            end
        end)
    end

    tripmineStatus.Text = "Status: Tripmine locked to "..targetPlayer.Name.."!"
end

local function toggleTripmineLoop()
    tripmineLoopEnabled = not tripmineLoopEnabled
    
    if tripmineLoopEnabled then
        tripmineLoopToggle.Text = "Loop: ON"
        tripmineLoopToggle.TextColor3 = Color3.new(0, 1, 0)
        tripmineStatus.Text = "Status: Loop enabled - tripmine will follow target"
    else
        tripmineLoopToggle.Text = "Loop: OFF"
        tripmineLoopToggle.TextColor3 = Color3.new(1, 0, 0)
        tripmineStatus.Text = "Status: Loop disabled"
        
        if tripmineLoopConnection then
            tripmineLoopConnection:Disconnect()
            tripmineLoopConnection = nil
        end
        
        if tripmineBox then
            tripmineBox.Velocity = Vector3.new(0, 0, 0)
        end
        if tripmineCenter then
            tripmineCenter.Velocity = Vector3.new(0, 0, 0)
        end
    end
end

tripmineThrowBtn.MouseButton1Click:Connect(function()
    local playerName = tripmineInput.Text
    if playerName and playerName ~= "" then
        local targetPlayer = Players:FindFirstChild(playerName)
        if targetPlayer then
            throwTripmineAtPlayer(targetPlayer)
        else
            tripmineStatus.Text = "Status: Player not found!"
        end
    else
        tripmineStatus.Text = "Status: Enter a username!"
    end
end)

tripmineLoopToggle.MouseButton1Click:Connect(toggleTripmineLoop)

-- Teleport Function
local function teleportBehindPlayer(targetPlayer)
    if not targetPlayer then
        teleportStatus.Text = "Status: No target selected"
        return
    end
    if not targetPlayer.Character then
        teleportStatus.Text = "Status: Target has no character"
        return
    end
    
    local humanoidRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        teleportStatus.Text = "Status: Target missing HumanoidRootPart!"
        return
    end
    
    local localPlayer = Players.LocalPlayer
    local localCharacter = localPlayer.Character
    if not localCharacter then
        teleportStatus.Text = "Status: You have no character!"
        return
    end
    
    local localRoot = localCharacter:FindFirstChild("HumanoidRootPart")
    if not localRoot then
        teleportStatus.Text = "Status: You're missing HumanoidRootPart!"
        return
    end
    
    local targetCFrame = humanoidRootPart.CFrame
    local behindPosition = targetCFrame.Position - (targetCFrame.LookVector * 5.5)
    
    localRoot.CFrame = CFrame.new(behindPosition, targetCFrame.Position)
    
    teleportStatus.Text = "Status: Teleported behind "..targetPlayer.Name.."!"
end

teleportBtn.MouseButton1Click:Connect(function()
    local playerName = teleportInput.Text
    if playerName and playerName ~= "" then
        local targetPlayer = Players:FindFirstChild(playerName)
        if targetPlayer then
            teleportBehindPlayer(targetPlayer)
        else
            teleportStatus.Text = "Status: Player not found!"
        end
    else
        teleportStatus.Text = "Status: Enter a username!"
    end
end)

-- Spookz Functions
local function playBlockAnimation()
    local character = Players.LocalPlayer.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://72722244508749"
    
    local animTrack = humanoid:LoadAnimation(animation)
    animTrack:Play()
    
    spookzStatus.Text = "Block animation played!"
    task.wait(3)
    spookzStatus.Text = "Status: Ready"
end

blockBtn.MouseButton1Click:Connect(playBlockAnimation)

-- Highlight Functions
local highlightEnabled = false
local highlightConnections = {}

local function ApplyHighlight(player)
    if not highlightEnabled then return end
    
    local character = player.Character
    if not character then
        character = player.CharacterAdded:Wait()
    end
    
    local highlighter = Instance.new("Highlight")
    highlighter.Parent = character
    highlighter.OutlineColor = Color3.fromRGB(255, 0, 0)
    highlighter.FillTransparency = 0.5
    highlighter.FillColor = player.TeamColor.Color

    highlightConnections[player] = {
        Highlighter = highlighter,
        TeamConnection = player:GetPropertyChangedSignal("TeamColor"):Connect(function()
            highlighter.FillColor = player.TeamColor.Color
        end)
    }
end

local function ToggleHighlights()
    highlightEnabled = not highlightEnabled
    
    if highlightEnabled then
        highlightBtn.Text = "Disable Highlights"
        spookzStatus.Text = "Highlights enabled!"
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                ApplyHighlight(player)
            end
        end
        
        Players.PlayerAdded:Connect(function(player)
            if player ~= Players.LocalPlayer then
                ApplyHighlight(player)
            end
        end)
    else
        highlightBtn.Text = "Enable Highlights"
        spookzStatus.Text = "Highlights disabled!"
        
        for _, data in pairs(highlightConnections) do
            if data.Highlighter and data.Highlighter.Parent then
                data.Highlighter:Destroy()
            end
            if data.TeamConnection then
                data.TeamConnection:Disconnect()
            end
        end
        
        highlightConnections = {}
    end
    
    task.wait(3)
    spookzStatus.Text = "Status: Ready"
end

highlightBtn.MouseButton1Click:Connect(ToggleHighlights)

-- Health Bar Functions
local healthBarEnabled = false
local healthBarConnections = {}

local function createHealthBar(player)
    if not healthBarEnabled then return end
    
    local character = player.Character
    if not character then
        character = player.CharacterAdded:Wait()
    end
    
    local head = character:WaitForChild("Head")
    local humanoid = character:WaitForChild("Humanoid")
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "HealthBarESP"
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 100, 0, 30)
    billboard.Adornee = head
    billboard.ExtentsOffset = Vector3.new(0, 3, 0)
    billboard.MaxDistance = 100
    
    local background = Instance.new("Frame")
    background.Name = "Background"
    background.Size = UDim2.new(1, 0, 0, 20)
    background.Position = UDim2.new(0, 0, 0, 10)
    background.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
    background.BorderSizePixel = 0
    background.Parent = billboard
    
    local healthBar = Instance.new("Frame")
    healthBar.Name = "HealthBar"
    healthBar.Size = UDim2.new(1, -4, 1, -4)
    healthBar.Position = UDim2.new(0, 2, 0, 2)
    healthBar.BackgroundColor3 = Color3.new(0, 1, 0)
    healthBar.BorderSizePixel = 0
    healthBar.Parent = background
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(1, 0, 0, 10)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextSize = 12
    nameLabel.Parent = billboard
    
    local function updateHealth()
        local health = humanoid.Health
        local maxHealth = humanoid.MaxHealth
        local percentage = health / maxHealth
        
        healthBar.Size = UDim2.new(percentage, -4, 1, -4)
        
        if percentage > 0.5 then
            healthBar.BackgroundColor3 = Color3.new(1 - (percentage - 0.5) * 2, 1, 0)
        else
            healthBar.BackgroundColor3 = Color3.new(1, percentage * 2, 0)
        end
    end
    
    local function onDeath()
        billboard:Destroy()
    end
    
    local healthConnection = humanoid.HealthChanged:Connect(updateHealth)
    local deathConnection = humanoid.Died:Connect(onDeath)
    
    updateHealth()
    billboard.Parent = character
    
    healthBarConnections[player] = {
        Billboard = billboard,
        HealthConnection = healthConnection,
        DeathConnection = deathConnection
    }
end

local function ToggleHealthBars()
    healthBarEnabled = not healthBarEnabled
    
    if healthBarEnabled then
        healthBarBtn.Text = "Disable Health Bars"
        spookzStatus.Text = "Health bars enabled!"
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                createHealthBar(player)
            end
        end
        
        Players.PlayerAdded:Connect(function(player)
            if player ~= Players.LocalPlayer then
                createHealthBar(player)
            end
        end)
    else
        healthBarBtn.Text = "Enable Health Bars"
        spookzStatus.Text = "Health bars disabled!"
        
        for _, data in pairs(healthBarConnections) do
            if data.Billboard and data.Billboard.Parent then
                data.Billboard:Destroy()
            end
            if data.HealthConnection then
                data.HealthConnection:Disconnect()
            end
            if data.DeathConnection then
                data.DeathConnection:Disconnect()
            end
        end
        
        healthBarConnections = {}
    end
    
    task.wait(3)
    spookzStatus.Text = "Status: Ready"
end

healthBarBtn.MouseButton1Click:Connect(ToggleHealthBars)

-- Stamina Functions
local staminaEnabled = false
local staminaLoop = nil
local staminaModule = nil

local function ToggleStamina()
    staminaEnabled = not staminaEnabled
    
    if staminaEnabled then
        if not staminaModule then
            local success, result = pcall(function()
                staminaModule = require(game.ReplicatedStorage.Systems.Character.Game.Sprinting)
            end)
            
            if not success then
                spookzStatus.Text = "Error: Couldn't find stamina module!"
                staminaEnabled = false
                return
            end
        end
        
        staminaBtn.Text = "Infinite Stamina: ON"
        staminaBtn.TextColor3 = Color3.new(0, 1, 0)
        spookzStatus.Text = "Infinite Stamina enabled!"
        
        staminaModule.StaminaLossDisabled = true
        
        staminaLoop = RunService.Heartbeat:Connect(function()
            pcall(function()
                staminaModule.Stamina = staminaModule.MaxStamina
                staminaModule.StaminaChanged:Fire()
            end)
        end)
    else
        staminaBtn.Text = "Infinite Stamina: OFF"
        staminaBtn.TextColor3 = Color3.new(1, 0, 0)
        spookzStatus.Text = "Infinite Stamina disabled!"
        
        if staminaLoop then
            staminaLoop:Disconnect()
            staminaLoop = nil
        end
        
        if staminaModule then
            pcall(function()
                staminaModule.StaminaLossDisabled = false
            end)
        end
    end
    
    task.wait(3)
    spookzStatus.Text = "Status: Ready"
end

staminaBtn.MouseButton1Click:Connect(ToggleStamina)
