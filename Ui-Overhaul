local gui = Instance.new("ScreenGui")
gui.Name = "HackerUI"
gui.Parent = game:GetService("CoreGui")
gui.ResetOnSpawn = false

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Loading Screen
local loadingFrame = Instance.new("Frame")
loadingFrame.Name = "LoadingFrame"
loadingFrame.Parent = gui
loadingFrame.BackgroundColor3 = Color3.new(0, 0, 0)
loadingFrame.BorderSizePixel = 0
loadingFrame.Size = UDim2.new(1, 0, 1, 0)
loadingFrame.ZIndex = 999

local loadingContainer = Instance.new("Frame")
loadingContainer.Name = "LoadingContainer"
loadingContainer.Parent = loadingFrame
loadingContainer.BackgroundTransparency = 1
loadingContainer.Position = UDim2.new(0.5, 0, 0.5, -50)
loadingContainer.AnchorPoint = Vector2.new(0.5, 0.5)
loadingContainer.Size = UDim2.new(0.4, 0, 0.2, 0)

local loadingTitle = Instance.new("TextLabel")
loadingTitle.Name = "LoadingTitle"
loadingTitle.Parent = loadingContainer
loadingTitle.BackgroundTransparency = 1
loadingTitle.Size = UDim2.new(1, 0, 0.3, 0)
loadingTitle.Font = Enum.Font.Code
loadingTitle.Text = "SYSTEM INITIALIZATION"
loadingTitle.TextColor3 = Color3.new(1, 0, 0)
loadingTitle.TextSize = 24
loadingTitle.TextStrokeTransparency = 0
loadingTitle.TextStrokeColor3 = Color3.new(0.5, 0, 0)

local loadingBar = Instance.new("Frame")
loadingBar.Name = "LoadingBar"
loadingBar.Parent = loadingContainer
loadingBar.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
loadingBar.BorderColor3 = Color3.new(1, 0, 0)
loadingBar.Position = UDim2.new(0, 0, 0.4, 0)
loadingBar.Size = UDim2.new(1, 0, 0.2, 0)

local loadingProgress = Instance.new("Frame")
loadingProgress.Name = "LoadingProgress"
loadingProgress.Parent = loadingBar
loadingProgress.BackgroundColor3 = Color3.new(1, 0, 0)
loadingProgress.BorderSizePixel = 0
loadingProgress.Size = UDim2.new(0, 0, 1, 0)

local loadingText = Instance.new("TextLabel")
loadingText.Name = "LoadingText"
loadingText.Parent = loadingContainer
loadingText.BackgroundTransparency = 1
loadingText.Position = UDim2.new(0, 0, 0.7, 0)
loadingText.Size = UDim2.new(1, 0, 0.3, 0)
loadingText.Font = Enum.Font.Code
loadingText.Text = "Initializing systems..."
loadingText.TextColor3 = Color3.new(1, 0, 0)
loadingText.TextSize = 16

-- Main UI (Initially Hidden)
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Parent = gui
mainFrame.BackgroundColor3 = Color3.new(0, 0, 0)
mainFrame.BackgroundTransparency = 0.1
mainFrame.BorderColor3 = Color3.new(1, 0, 0)
mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.Size = UDim2.new(0.4, 0, 0.6, 0)
mainFrame.Visible = false
mainFrame.ClipsDescendants = true

-- Scanlines effect
local scanlines = Instance.new("Frame")
scanlines.Name = "Scanlines"
scanlines.Parent = mainFrame
scanlines.BackgroundTransparency = 0.8
scanlines.BackgroundColor3 = Color3.new(1, 0, 0)
scanlines.Size = UDim2.new(1, 0, 1, 0)
scanlines.ZIndex = 10

local scanlinePattern = Instance.new("UIGradient")
scanlinePattern.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0),
    NumberSequenceKeypoint.new(0.4, 1),
    NumberSequenceKeypoint.new(0.6, 1),
    NumberSequenceKeypoint.new(1, 0)
})
scanlinePattern.Rotation = 90
scanlinePattern.Parent = scanlines

-- Header with glitch effect
local header = Instance.new("TextLabel")
header.Name = "Header"
header.Parent = mainFrame
header.BackgroundTransparency = 1
header.Position = UDim2.new(0, 0, 0, 0)
header.Size = UDim2.new(1, 0, 0.1, 0)
header.Font = Enum.Font.Code
header.Text = "HΛCKER INTERFΛCE v2.0"
header.TextColor3 = Color3.new(1, 0, 0)
header.TextSize = 24
header.ZIndex = 2

-- Navigation Buttons Container
local navFrame = Instance.new("Frame")
navFrame.Name = "NavFrame"
navFrame.Parent = mainFrame
navFrame.BackgroundTransparency = 0.5
navFrame.BackgroundColor3 = Color3.new(0, 0, 0)
navFrame.BorderColor3 = Color3.new(1, 0, 0)
navFrame.Position = UDim2.new(0, 0, 0.1, 0)
navFrame.Size = UDim2.new(1, 0, 0.1, 0)

-- Initialize the UI with loading sequence
local function initializeUI()
    local loadingSteps = {
        "Initializing systems...",
        "Loading modules...",
        "Establishing connection...",
        "Bypassing security...",
        "Accessing mainframe...",
        "System ready."
    }
    
    local function updateLoadingText(text)
        loadingText.Text = text
    end
    
    local function completeLoading()
        local fadeOut = TweenService:Create(loadingFrame, TweenInfo.new(1), {BackgroundTransparency = 1})
        fadeOut:Play()
        fadeOut.Completed:Wait()
        loadingFrame:Destroy()
        
        mainFrame.Visible = true
        local fadeIn = TweenService:Create(mainFrame, TweenInfo.new(0.5), {BackgroundTransparency = 0.1})
        fadeIn:Play()
    end
    
    -- Animate loading bar and text
    for i, step in ipairs(loadingSteps) do
        local progress = TweenService:Create(loadingProgress, 
            TweenInfo.new(0.5, Enum.EasingStyle.Linear), 
            {Size = UDim2.new(i/#loadingSteps, 0, 1, 0)}
        )
        progress:Play()
        updateLoadingText(step)
        wait(0.7)
    end
    
    wait(0.5)
    completeLoading()
end

-- Start the initialization
initializeUI()

-- Create glitch effect for header
local function glitchEffect()
    while true do
        if math.random() < 0.1 then
            header.Text = string.gsub(header.Text, "[AE]", function()
                return math.random() < 0.5 and "Λ" or "Σ"
            end)
            wait(0.1)
            header.Text = "HΛCKER INTERFΛCE v2.0"
        end
        wait(0.2)
    end
end

-- Start glitch effect
coroutine.wrap(glitchEffect)()

-- Animate scanlines
local function animateScanlines()
    while true do
        local tween = TweenService:Create(scanlinePattern, 
            TweenInfo.new(2, Enum.EasingStyle.Linear), 
            {Offset = Vector2.new(0, 1)}
        )
        tween:Play()
        tween.Completed:Wait()
        scanlinePattern.Offset = Vector2.new(0, -1)
    end
end

-- Start scanline animation
coroutine.wrap(animateScanlines)()

-- Continue with the rest of your original UI code here...
-- (Add your buttons, functionality, etc.)
